<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Income and Expense Tracker</title>
    <script src="https://www.gstatic.com/firebasejs/9.17.2/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.17.2/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.17.2/firebase-firestore.js"></script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #000;
            color: #fff;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }

        h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
            color: #ffffff;
            text-align: center;
        }

        .container {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.8);
            max-width: 500px;
            width: 90%;
            backdrop-filter: blur(10px);
            animation: fadeIn 1s ease-in-out;
            display: flex;
            flex-direction: column;
            gap: 15px;
            box-sizing: border-box;
        }

        .input-group {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        input {
            padding: 15px;
            width: 100%;
            border: none;
            border-radius: 10px;
            background-color: rgba(255, 255, 255, 0.2);
            color: #fff;
            font-size: 1em;
            outline: none;
            box-sizing: border-box;
        }

        button {
            padding: 15px 20px;
            background: linear-gradient(to right, #333, #666);
            color: #fff;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 1em;
            transition: background 0.3s, transform 0.2s;
        }

        button:hover {
            background: linear-gradient(to right, #555, #888);
            transform: scale(1.05);
        }

        table {
            margin-top: 20px;
            border-collapse: collapse;
            width: 100%;
            color: #fff;
        }

        th, td {
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 15px;
            text-align: center;
            background-color: rgba(255, 255, 255, 0.1);
        }

        th {
            background-color: rgba(255, 255, 255, 0.3);
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .fade {
            animation: fadeIn 0.5s ease-in-out;
        }
    </style>
</head>
<body>
    <h1>Income and Expense Tracker</h1>
    <div class="container">
        <div class="input-group">
            <input type="email" id="email" placeholder="Enter Email">
            <input type="password" id="password" placeholder="Enter Password">
        </div>
        <button onclick="signUpUser()">Sign Up</button>
        <button onclick="signInUser()">Sign In</button>
        <button onclick="signOutUser()">Sign Out</button>

        <div class="input-group">
            <input type="date" id="entryDate" placeholder="Select Date">
            <input type="number" id="income" placeholder="Enter Income ($)">
            <input type="number" id="expense" placeholder="Enter Expense ($)">
            <input type="text" id="description" placeholder="Enter Description (e.g., Tips, Food)">
        </div>
        <button onclick="addEntry()">Add Entry</button>

        <table id="trackerTable">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Income ($)</th>
                    <th>Expense ($)</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <script>
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.17.2/firebase-app.js";
        import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/9.17.2/firebase-auth.js";
        import { getFirestore, collection, addDoc, getDocs } from "https://www.gstatic.com/firebasejs/9.17.2/firebase-firestore.js";

        const firebaseConfig = {
            apiKey: "AIzaSyB0cqesm7KmerCsv00TWNjZT_-JPCjsV4E",
            authDomain: "cash-flow-tracker-76efe.firebaseapp.com",
            projectId: "cash-flow-tracker-76efe",
            storageBucket: "cash-flow-tracker-76efe.appspot.com",
            messagingSenderId: "232654883202",
            appId: "1:232654883202:web:xxxxxx"
        };

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        function signUpUser() {
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;

            createUserWithEmailAndPassword(auth, email, password)
                .then(() => alert('User signed up successfully!'))
                .catch(err => console.error(err.message));
        }

        function signInUser() {
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;

            signInWithEmailAndPassword(auth, email, password)
                .then(() => alert('User signed in successfully!'))
                .catch(err => console.error(err.message));
        }

        function signOutUser() {
            signOut(auth)
                .then(() => alert('User signed out successfully!'))
                .catch(err => console.error(err.message));
        }

        async function addEntry() {
            const date = document.getElementById("entryDate").value;
            const income = parseFloat(document.getElementById("income").value) || 0;
            const expense = parseFloat(document.getElementById("expense").value) || 0;
            const description = document.getElementById("description").value.trim();

            if (!date || (!income && !expense) || !description) {
                alert("Please fill in all fields correctly.");
                return;
            }

            try {
                await addDoc(collection(db, "entries"), { date, income, expense, description });
                alert("Entry added successfully!");
                loadEntries();
            } catch (err) {
                console.error(err.message);
            }
        }

        async function loadEntries() {
            const tableBody = document.querySelector("#trackerTable tbody");
            tableBody.innerHTML = "";

            try {
                const querySnapshot = await getDocs(collection(db, "entries"));
                querySnapshot.forEach(doc => {
                    const entry = doc.data();
                    const row = document.createElement("tr");
                    row.classList.add("fade");

                    const dateCell = document.createElement("td");
                    dateCell.textContent = entry.date;
                    row.appendChild(dateCell);

                    const incomeCell = document.createElement("td");
                    incomeCell.textContent = entry.income.toFixed(2);
                    row.appendChild(incomeCell);

                    const expenseCell = document.createElement("td");
                    expenseCell.textContent = entry.expense.toFixed(2);
                    row.appendChild(expenseCell);

                    const descriptionCell =
